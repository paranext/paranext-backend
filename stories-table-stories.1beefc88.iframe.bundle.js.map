{"version":3,"file":"stories-table-stories.1beefc88.iframe.bundle.js","mappings":"u9BAmEA,MAgDA,2BAhDsC,CACpCA,MAAO,eACPC,U,8DAAqB,GACrBC,KAAM,CAAC,YACPC,KAAM,CACJC,aAAeC,KACNA,IAAIC,IAGfC,SAAU,CACRC,mBAAoB,CAClBC,QAAS,UAEXC,sBAAuB,CACrBD,QAAS,UAEXE,sBAAuB,CACrBF,QAAS,UAEXG,sBAAuB,CACrBH,QAAS,WAEXI,uBAAwB,CACtBJ,QAAS,WAEXK,UAAW,CACTL,QAAS,UAEXM,gBAAiB,CACfN,QAAS,UAEXO,UAAW,CACTC,QAAS,CAAC,EAAG,GACbC,QAAS,CAAC,MAAO,OACjBT,QAAS,CACPU,KAAM,SACNC,OAAQ,CAAC,MAAO,SAGpBC,qBAAsB,CACpBZ,QAAS,WAEXa,UAAW,CACTb,QAAS,SAGbc,WAAY,CAxGd,SAASC,eAAeC,OAGtB,MAAOtB,KAAMuB,aAAc,2DAE3B,SAASC,cAAcC,YACrB,OAAQA,YACN,IAAK,QACH,MAAO,CAACC,EAAGC,IACFD,EAAED,YAAYG,cAAcD,EAAEF,aAEzC,IAAK,KACH,MAAO,CAACC,EAAGC,KACDD,EAAED,aAAeE,EAAEF,YAE/B,QACE,MAAM,IAAII,MAAM,4BAA4BJ,eAElD,CACA,MAAMK,QAAWC,OACfR,WAAW,CACTQ,MACA,EA6BJ,OAAO,sDAACT,MAAK,CAACtB,KAAM,IACfA,KACHgC,qBAPuBD,OACvBR,WAAW,CACTU,aAAcF,MACd,EAKFG,oBA9BsBC,cACtBZ,WAAW,CACTY,cAEyB,IAAvBA,YAAYC,OACdN,QAAQ9B,KAAK+B,MAEbD,QAAQ9B,KAAK+B,KAAKM,MAAK,CAACX,EAAQC,KAE9B,IAAK,MAAMU,QAAQF,YAAa,CAC9B,MACMG,WADad,cAAca,KAAKE,UACnBC,CAAWd,EAAGC,GACjC,GAAmB,IAAfW,WACF,MAA0B,QAAnBD,KAAKxB,UAAsByB,YAAcA,U,CAKpD,MAAM,IAAIT,MAAM,6CAA6C,I,EAajEY,aAAcX,UAElB,IAkDaY,QAAiB,CAC5B1C,KAAM,CACJ2C,QAAS,CAAC,CACRC,IAAK,KACLC,KAAM,MACL,CACDD,IAAK,QACLC,KAAM,UAERd,KAAM,CAAC,CACL5B,GAAI,IACJN,MAAO,+BACN,CACDM,GAAI,IACJN,MAAO,+BACN,CACDM,GAAI,IACJN,MAAO,oCACN,CACDM,GAAI,IACJN,MAAO,8BACN,CACDM,GAAI,IACJN,MAAO,8CACN,CACDM,GAAI,IACJN,MAAO,gCAGXiD,WAAY,CACVC,KAAM,CACJC,YAAa,CACXC,MAAO,6NAKFC,kBAA2B,CACtClD,KAAM,CACJ2C,QAAS,CAAC,CACRC,IAAK,KACLC,KAAM,KACNM,MAAO,IACPC,SAAU,IACVC,SAAU,IACVC,UAAU,EACVC,QAAQ,EACRC,WAAW,EACXC,UAAU,GACT,CACDb,IAAK,QACLC,KAAM,QACNM,MAAO,IACPC,SAAU,IACVC,SAAU,IACVC,UAAU,EACVC,QAAQ,EACRC,WAAW,EACXC,UAAU,IAEZ1B,KAAM,CAAC,CACL5B,GAAI,IACJN,MAAO,8BACN,CACDM,GAAI,IACJN,MAAO,+BACN,CACDM,GAAI,IACJN,MAAO,oCACN,CACDM,GAAI,IACJN,MAAO,8BACN,CACDM,GAAI,IACJN,MAAO,8CACN,CACDM,GAAI,IACJN,MAAO,gCAGXiD,WAAY,CACVC,KAAM,CACJC,YAAa,CACXC,MAAO,uOAKFS,yBAAkC,CAC7C1D,KAAM,CACJ2C,QAAS,CAAC,CACRC,IAAK,KACLC,KAAM,MACL,CACDD,IAAK,QACLC,KAAM,UAERd,KAAM,CAAC,CACL5B,GAAI,IACJN,MAAO,8BACN,CACDM,GAAI,IACJN,MAAO,+BACN,CACDM,GAAI,IACJN,MAAO,oCACN,CACDM,GAAI,IACJN,MAAO,8BACN,CACDM,GAAI,IACJN,MAAO,8CACN,CACDM,GAAI,IACJN,MAAO,+BAETQ,mBAAoB,IACpBE,sBAAuB,IACvBC,sBAAuB,IACvBC,uBAAuB,EACvBC,wBAAwB,GAE1BoC,WAAY,CACVC,KAAM,CACJC,YAAa,CACXC,MAAO,iMAKFU,wBAAiC,CAC5C3D,KAAM,CACJ2C,QAAS,CAAC,CACRC,IAAK,KACLC,KAAM,gBACNY,UAAU,GACT,CACDb,IAAK,QACLC,KAAM,8BACNY,UAAU,IAEZ1B,KAAM,CAAC,CACL5B,GAAI,IACJN,MAAO,8BACN,CACDM,GAAI,IACJN,MAAO,+BACN,CACDM,GAAI,IACJN,MAAO,oCACN,CACDM,GAAI,IACJN,MAAO,8BACN,CACDM,GAAI,IACJN,MAAO,8CACN,CACDM,GAAI,IACJN,MAAO,+BAET+D,eAAgB,KAEdC,QAAQC,IAAI,iBAAiB,GAGjChB,WAAY,CACVC,KAAM,CACJC,YAAa,CACXC,MAAO,4GAKFc,eAAwB,CACnC/D,KAAM,CACJ2C,QAAS,CAAC,CACRC,IAAK,KACLC,KAAM,MACL,CACDD,IAAK,QACLC,KAAM,mBACNS,UAAU,IAEZvB,KAAM,CAAC,CACL5B,GAAI,IACJN,MAAO,8BACN,CACDM,GAAI,IACJN,MAAO,+BACN,CACDM,GAAI,IACJN,MAAO,oCACN,CACDM,GAAI,IACJN,MAAO,8BACN,CACDM,GAAI,IACJN,MAAO,8CACN,CACDM,GAAI,IACJN,MAAO,+BAETmE,oBAAoB,EACpBrD,UAAW,GACXC,gBAAiB,KAEnBkC,WAAY,CACVC,KAAM,CACJC,YAAa,CACXC,MAAO,uDAKFgB,sBAA+B,CAC1CjE,KAAM,CACJ2C,QAAS,CAAC,CACRC,IAAK,KACLC,KAAM,MACL,CACDD,IAAK,QACLC,KAAM,mBACNS,UAAU,IAEZvB,KAAM,CAAC,CACL5B,GAAI,IACJN,MAAO,8BACN,CACDM,GAAI,IACJN,MAAO,+BACN,CACDM,GAAI,IACJN,MAAO,oCACN,CACDM,GAAI,IACJN,MAAO,8BACN,CACDM,GAAI,IACJN,MAAO,8CACN,CACDM,GAAI,IACJN,MAAO,+BAETqE,YAAa,CAAClE,KAA+BmE,SAE3CN,QAAQC,IAAI9D,MAGZ6D,QAAQC,IAAIK,MAAM,EAEpBC,kBAAmB,CAACpE,KAA+BmE,SAEjDN,QAAQC,IAAI9D,MAGZ6D,QAAQC,IAAIK,MAAM,EAEpBE,kBAAmB,CAACrE,KAA+BmE,SAEjDN,QAAQC,IAAI9D,MAGZ6D,QAAQC,IAAIK,MAAM,EAEpBG,cAAe,CAACtE,KAAiCmE,SAE/CN,QAAQC,IAAI9D,MAGZ6D,QAAQC,IAAIK,MAAM,GAGtBrB,WAAY,CACVC,KAAM,CACJC,YAAa,CACXC,MAAO,6OAKFsB,UAAmB,CAC9BvE,KAAM,CACJ2C,QAAS,CAAC,CACRC,IAAK,KACLC,KAAM,MACL,CACDD,IAAK,QACLC,KAAM,mBACNS,UAAU,IAEZvB,KAAM,CAAC,CACL5B,GAAI,IACJN,MAAO,8BACN,CACDM,GAAI,IACJN,MAAO,+BACN,CACDM,GAAI,IACJN,MAAO,oCACN,CACDM,GAAI,IACJN,MAAO,8BACN,CACDM,GAAI,IACJN,MAAO,8CACN,CACDM,GAAI,IACJN,MAAO,+BAETgB,UAAW,OAEbiC,WAAY,CACVC,KAAM,CACJC,YAAa,CACXC,MAAO,+IAeFuB,eAAwB,CACnCxE,KAAM,CACJ2C,QAAS,CAAC,CACRC,IAAK,KACLC,KAAM,MACL,CACDD,IAAK,QACLC,KAAM,mBACNS,UAAU,IAEZvB,KApBiB,MACnB,MAAMA,KAAc,GACpB,IAAK,IAAI0C,EAAI,EAAGA,EAAI,IAAMA,IACxB1C,KAAK2C,KAAK,CACRvE,GAAIsE,EAAEE,WACN9E,MAAO,+BAGX,OAAOkC,IAAI,EAYH6C,GACN1D,sBAAsB,GAExB4B,WAAY,CACVC,KAAM,CACJC,YAAa,CACXC,MAAO,0DAKF4B,uBAAgC,CAC3C7E,KAAM,CACJ2C,QAAS,CAAC,CACRC,IAAK,KACLC,KAAM,MACL,CACDD,IAAK,QACLC,KAAM,mBACNS,UAAU,IAEZvB,KAAM,CAAC,CACL5B,GAAI,IACJN,MAAO,8BACN,CACDM,GAAI,IACJN,MAAO,+BACN,CACDM,GAAI,IACJN,MAAO,oCACN,CACDM,GAAI,IACJN,MAAO,8BACN,CACDM,GAAI,IACJN,MAAO,8CACN,CACDM,GAAI,IACJN,MAAO,8BACN,CACDM,GAAI,IACJN,MAAO,8BACN,CACDM,GAAI,IACJN,MAAO,+BACN,CACDM,GAAI,IACJN,MAAO,oCACN,CACDM,GAAI,IACJN,MAAO,8BACN,CACDM,GAAI,KACJN,MAAO,8CACN,CACDM,GAAI,KACJN,MAAO,8BACN,CACDM,GAAI,KACJN,MAAO,8BACN,CACDM,GAAI,KACJN,MAAO,+BACN,CACDM,GAAI,KACJN,MAAO,oCACN,CACDM,GAAI,KACJN,MAAO,8BACN,CACDM,GAAI,KACJN,MAAO,8CACN,CACDM,GAAI,KACJN,MAAO,+BAETiF,SAAWX,QAETN,QAAQC,IAAIK,MAAM,EAEpBY,OAAQ,EACNC,UACAC,oBAEIC,OAAOC,iBACTC,UAAUC,UAAUC,UAAUN,UAAWC,iB,EAG7CM,QAAS,EACPN,gBACAD,UACAQ,gBACAC,cAEA,MAAMC,oBAAsB,CAAC,QAAS,UAAW,QACjD,MAAwB,WAApBT,iBAAgC,CAAC,KAAM,UAAUU,SAASH,mBAAqBE,oBAAoBC,SAASH,kBAAoBE,oBAAoBC,SAASV,mBAAqBA,kBAAoBO,gBACjMC,UAEF,IACFA,UACH,CAACD,iBAAkBR,UAAWC,iBAC/B,GAGLnC,WAAY,CACVC,KAAM,CACJC,YAAa,CACXC,MAAO,4LAKF2C,iBAA0B,CACrC5F,KAAM,CACJ2C,QAAS,CAAC,CACRC,IAAK,KACLC,KAAM,MACL,CACDD,IAAK,QACLC,KAAM,mBACNS,UAAU,IAEZvB,KAAM,CAAC,CACL5B,GAAI,IACJN,MAAO,8BACN,CACDM,GAAI,IACJN,MAAO,+BACN,CACDM,GAAI,IACJN,MAAO,oCACN,CACDM,GAAI,IACJN,MAAO,8BACN,CACDM,GAAI,IACJN,MAAO,8CACN,CACDM,GAAI,IACJN,MAAO,+BAETsB,UAAW,YAEb2B,WAAY,CACVC,KAAM,CACJC,YAAa,CACXC,MAAO,8DAkBR,MAAM4C,qBAA8B,CACzC7F,KAAM,CACJ2C,QAAS,CAAC,CACRC,IAAK,KACLC,KAAM,MACL,CACDD,IAAK,QACLC,KAAM,4CACNiD,eArBN,SAASC,kBAAoB,YAChB,IACR,SASH,OAAO,+DAAOC,SANSC,IACrBC,YAAY,IACPhG,IACH,CAACiG,OAAOvD,KAAMqD,EAAEG,OAAOC,OACvB,GAGN,EAUM/C,SAAWpD,KACU,IAAXA,IAAIC,KAGhB4B,KAAM,CAAC,CACL5B,GAAI,IACJN,MAAO,8BACN,CACDM,GAAI,IACJN,MAAO,+BACN,CACDM,GAAI,IACJN,MAAO,oCACN,CACDM,GAAI,IACJN,MAAO,8BACN,CACDM,GAAI,IACJN,MAAO,8CACN,CACDM,GAAI,IACJN,MAAO,gCAGXiD,WAAY,CACVC,KAAM,CACJC,YAAa,CACXC,MAAO,+DAKfP,QAAQI,WAAa,IAChBJ,QAAQI,WACXC,KAAM,IACDL,QAAQI,YAAYC,KACvBuD,OAAQ,CACNC,eAAgB,25BACb7D,QAAQI,YAAYC,MAAMuD,UAInCpD,kBAAkBJ,WAAa,IAC1BI,kBAAkBJ,WACrBC,KAAM,IACDG,kBAAkBJ,YAAYC,KACjCuD,OAAQ,CACNC,eAAgB,mtCACbrD,kBAAkBJ,YAAYC,MAAMuD,UAI7C5C,yBAAyBZ,WAAa,IACjCY,yBAAyBZ,WAC5BC,KAAM,IACDW,yBAAyBZ,YAAYC,KACxCuD,OAAQ,CACNC,eAAgB,uhCACb7C,yBAAyBZ,YAAYC,MAAMuD,UAIpD3C,wBAAwBb,WAAa,IAChCa,wBAAwBb,WAC3BC,KAAM,IACDY,wBAAwBb,YAAYC,KACvCuD,OAAQ,CACNC,eAAgB,+9BACb5C,wBAAwBb,YAAYC,MAAMuD,UAInDvC,eAAejB,WAAa,IACvBiB,eAAejB,WAClBC,KAAM,IACDgB,eAAejB,YAAYC,KAC9BuD,OAAQ,CACNC,eAAgB,00BACbxC,eAAejB,YAAYC,MAAMuD,UAI1CrC,sBAAsBnB,WAAa,IAC9BmB,sBAAsBnB,WACzBC,KAAM,IACDkB,sBAAsBnB,YAAYC,KACrCuD,OAAQ,CACNC,eAAgB,m5DACbtC,sBAAsBnB,YAAYC,MAAMuD,UAIjD/B,UAAUzB,WAAa,IAClByB,UAAUzB,WACbC,KAAM,IACDwB,UAAUzB,YAAYC,KACzBuD,OAAQ,CACNC,eAAgB,o3BACbhC,UAAUzB,YAAYC,MAAMuD,UAIrC9B,eAAe1B,WAAa,IACvB0B,eAAe1B,WAClBC,KAAM,IACDyB,eAAe1B,YAAYC,KAC9BuD,OAAQ,CACNC,eAAgB,yXACb/B,eAAe1B,YAAYC,MAAMuD,UAI1CzB,uBAAuB/B,WAAa,IAC/B+B,uBAAuB/B,WAC1BC,KAAM,IACD8B,uBAAuB/B,YAAYC,KACtCuD,OAAQ,CACNC,eAAgB,isFACb1B,uBAAuB/B,YAAYC,MAAMuD,UAIlDV,iBAAiB9C,WAAa,IACzB8C,iBAAiB9C,WACpBC,KAAM,IACD6C,iBAAiB9C,YAAYC,KAChCuD,OAAQ,CACNC,eAAgB,+xBACbX,iBAAiB9C,YAAYC,MAAMuD,UAI5CT,qBAAqB/C,WAAa,IAC7B+C,qBAAqB/C,WACxBC,KAAM,IACD8C,qBAAqB/C,YAAYC,KACpCuD,OAAQ,CACNC,eAAgB,83BACbV,qBAAqB/C,YAAYC,MAAMuD,S","sources":["webpack:///./src/stories/table.stories.tsx"],"sourcesContent":["import type { Meta, StoryObj } from '@storybook/react';\nimport { useArgs } from '@storybook/client-api';\nimport { Table, TableCellClickArgs, TableCellMouseEvent, TableCopyEvent, TableCellKeyboardEvent, TableCellKeyDownArgs, TablePasteEvent, TableProps, TableSortColumn, TableEditorProps } from 'papi-components';\nimport { ChangeEvent, Key, ReactElement, UIEvent } from 'react';\ntype Row = {\n  id: string;\n  title: string;\n};\ntype Story = StoryObj<typeof Table<Row>>;\nfunction TableDecorator(Story: (update?: {\n  args: Partial<TableProps<Row>>;\n}) => ReactElement) {\n  const [args, updateArgs] = useArgs();\n  type Comparator = (a: Row, b: Row) => number;\n  function getComparator(sortColumn: string): Comparator {\n    switch (sortColumn) {\n      case 'title':\n        return (a, b) => {\n          return a[sortColumn].localeCompare(b[sortColumn]);\n        };\n      case 'id':\n        return (a, b) => {\n          return +a[sortColumn] - +b[sortColumn];\n        };\n      default:\n        throw new Error(`unsupported sortColumn: \"${sortColumn}\"`);\n    }\n  }\n  const setRows = (rows: Row[]) => {\n    updateArgs({\n      rows\n    });\n  };\n  const setSortColumns = (sortColumns: TableSortColumn[]) => {\n    updateArgs({\n      sortColumns\n    });\n    if (sortColumns.length === 0) {\n      setRows(args.rows);\n    } else {\n      setRows(args.rows.sort((a: Row, b: Row) => {\n        // eslint-disable-next-line no-restricted-syntax\n        for (const sort of sortColumns) {\n          const comparator = getComparator(sort.columnKey);\n          const compResult = comparator(a, b);\n          if (compResult !== 0) {\n            return sort.direction === 'ASC' ? compResult : -compResult;\n          }\n        }\n        // We expect the for loop to always return proper data, so this code\n        // should never be reached\n        throw new Error('An issue occurred while sorting table data');\n      }));\n    }\n  };\n  const setSelectedRows = (rows: Set<Key>) => {\n    updateArgs({\n      selectedRows: rows\n    });\n  };\n  return <Story args={{\n    ...args,\n    onSelectedRowsChange: setSelectedRows,\n    onSortColumnsChange: setSortColumns,\n    onRowsChange: setRows\n  }} />;\n}\nconst meta: Meta<typeof Table<Row>> = {\n  title: 'Basics/Table',\n  component: Table<Row>,\n  tags: ['autodocs'],\n  args: {\n    rowKeyGetter: (row: Row) => {\n      return row.id;\n    }\n  },\n  argTypes: {\n    defaultColumnWidth: {\n      control: 'number'\n    },\n    defaultColumnMinWidth: {\n      control: 'number'\n    },\n    defaultColumnMaxWidth: {\n      control: 'number'\n    },\n    defaultColumnSortable: {\n      control: 'boolean'\n    },\n    defaultColumnResizable: {\n      control: 'boolean'\n    },\n    rowHeight: {\n      control: 'number'\n    },\n    headerRowHeight: {\n      control: 'number'\n    },\n    direction: {\n      options: [0, 1],\n      mapping: ['ltr', 'rtl'],\n      control: {\n        type: 'select',\n        labels: ['LTR', 'RTL']\n      }\n    },\n    enableVirtualization: {\n      control: 'boolean'\n    },\n    className: {\n      control: 'text'\n    }\n  },\n  decorators: [TableDecorator]\n};\nexport default meta;\nexport const Default: Story = {\n  args: {\n    columns: [{\n      key: 'id',\n      name: 'ID'\n    }, {\n      key: 'title',\n      name: 'Title'\n    }],\n    rows: [{\n      id: '0',\n      title: 'Loremm ipsum dolor sit amet'\n    }, {\n      id: '1',\n      title: 'Consectetur adipiscing elit'\n    }, {\n      id: '2',\n      title: 'Pellentesque suscipit tortor est'\n    }, {\n      id: '3',\n      title: 'Ut egestas massa aliquam a'\n    }, {\n      id: '4',\n      title: 'Nulla egestas vestibulum felis a venenatis'\n    }, {\n      id: '5',\n      title: 'Sed aliquet pulvinar neque'\n    }]\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: \"This is what the table looks like when only 'columns' and 'rows' are provided.\\n\" + 'These props are always required.\\n' + 'Default behavior is:\\n' + '- Resizable, sortable, non-editable, non-frozen columns\\n' + '- Non-selectable rows'\n      }\n    }\n  }\n};\nexport const CustomizedColumns: Story = {\n  args: {\n    columns: [{\n      key: 'id',\n      name: 'ID',\n      width: 300,\n      minWidth: 200,\n      maxWidth: 400,\n      editable: true,\n      frozen: false,\n      resizable: true,\n      sortable: true\n    }, {\n      key: 'title',\n      name: 'Title',\n      width: 300,\n      minWidth: 200,\n      maxWidth: 400,\n      editable: false,\n      frozen: false,\n      resizable: true,\n      sortable: true\n    }],\n    rows: [{\n      id: '0',\n      title: 'Lorem ipsum dolor sit amet'\n    }, {\n      id: '1',\n      title: 'Consectetur adipiscing elit'\n    }, {\n      id: '2',\n      title: 'Pellentesque suscipit tortor est'\n    }, {\n      id: '3',\n      title: 'Ut egestas massa aliquam a'\n    }, {\n      id: '4',\n      title: 'Nulla egestas vestibulum felis a venenatis'\n    }, {\n      id: '5',\n      title: 'Sed aliquet pulvinar neque'\n    }]\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: \"This story showcases all possible props that can be set on 'columns'.\\n\" + \"Note that the 'editable' prop is meaningless when the 'editor' prop is not set.\\n\" + \"When an 'editor' is provided, the 'editable' prop will default to 'true'\"\n      }\n    }\n  }\n};\nexport const CustomizedColumnDefaults: Story = {\n  args: {\n    columns: [{\n      key: 'id',\n      name: 'ID'\n    }, {\n      key: 'title',\n      name: 'Title'\n    }],\n    rows: [{\n      id: '0',\n      title: 'Lorem ipsum dolor sit amet'\n    }, {\n      id: '1',\n      title: 'Consectetur adipiscing elit'\n    }, {\n      id: '2',\n      title: 'Pellentesque suscipit tortor est'\n    }, {\n      id: '3',\n      title: 'Ut egestas massa aliquam a'\n    }, {\n      id: '4',\n      title: 'Nulla egestas vestibulum felis a venenatis'\n    }, {\n      id: '5',\n      title: 'Sed aliquet pulvinar neque'\n    }],\n    defaultColumnWidth: 300,\n    defaultColumnMinWidth: 100,\n    defaultColumnMaxWidth: 500,\n    defaultColumnSortable: false,\n    defaultColumnResizable: true\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: \"This story showcases all possible defaults for 'column' props that can be set.\\n\" + 'These defaults will be set to all columns and can be overridden by setting props' + ' on the individual columns'\n      }\n    }\n  }\n};\nexport const ColumnCallBackFunctions: Story = {\n  args: {\n    columns: [{\n      key: 'id',\n      name: 'ID (sortable)',\n      sortable: true\n    }, {\n      key: 'title',\n      name: 'Title (sortable & editable)',\n      sortable: true\n    }],\n    rows: [{\n      id: '0',\n      title: 'Lorem ipsum dolor sit amet'\n    }, {\n      id: '1',\n      title: 'Consectetur adipiscing elit'\n    }, {\n      id: '2',\n      title: 'Pellentesque suscipit tortor est'\n    }, {\n      id: '3',\n      title: 'Ut egestas massa aliquam a'\n    }, {\n      id: '4',\n      title: 'Nulla egestas vestibulum felis a venenatis'\n    }, {\n      id: '5',\n      title: 'Sed aliquet pulvinar neque'\n    }],\n    onColumnResize: () => {\n      // eslint-disable-next-line no-console\n      console.log('Column resized');\n    }\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: \"This story showcases the 'onColumnResize' callback function.\\n\" + 'Check the developer console for output.'\n      }\n    }\n  }\n};\nexport const CustomizedRows: Story = {\n  args: {\n    columns: [{\n      key: 'id',\n      name: 'ID'\n    }, {\n      key: 'title',\n      name: 'Title (editable)',\n      editable: true\n    }],\n    rows: [{\n      id: '0',\n      title: 'Lorem ipsum dolor sit amet'\n    }, {\n      id: '1',\n      title: 'Consectetur adipiscing elit'\n    }, {\n      id: '2',\n      title: 'Pellentesque suscipit tortor est'\n    }, {\n      id: '3',\n      title: 'Ut egestas massa aliquam a'\n    }, {\n      id: '4',\n      title: 'Nulla egestas vestibulum felis a venenatis'\n    }, {\n      id: '5',\n      title: 'Sed aliquet pulvinar neque'\n    }],\n    enableSelectColumn: true,\n    rowHeight: 50,\n    headerRowHeight: 100\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'This story showcases how rows can be customized.'\n      }\n    }\n  }\n};\nexport const CellCallbackFunctions: Story = {\n  args: {\n    columns: [{\n      key: 'id',\n      name: 'ID'\n    }, {\n      key: 'title',\n      name: 'Title (editable)',\n      editable: true\n    }],\n    rows: [{\n      id: '0',\n      title: 'Lorem ipsum dolor sit amet'\n    }, {\n      id: '1',\n      title: 'Consectetur adipiscing elit'\n    }, {\n      id: '2',\n      title: 'Pellentesque suscipit tortor est'\n    }, {\n      id: '3',\n      title: 'Ut egestas massa aliquam a'\n    }, {\n      id: '4',\n      title: 'Nulla egestas vestibulum felis a venenatis'\n    }, {\n      id: '5',\n      title: 'Sed aliquet pulvinar neque'\n    }],\n    onCellClick: (args: TableCellClickArgs<Row>, event: TableCellMouseEvent) => {\n      // eslint-disable-next-line no-console\n      console.log(args);\n\n      // eslint-disable-next-line no-console\n      console.log(event);\n    },\n    onCellDoubleClick: (args: TableCellClickArgs<Row>, event: TableCellMouseEvent) => {\n      // eslint-disable-next-line no-console\n      console.log(args);\n\n      // eslint-disable-next-line no-console\n      console.log(event);\n    },\n    onCellContextMenu: (args: TableCellClickArgs<Row>, event: TableCellMouseEvent) => {\n      // eslint-disable-next-line no-console\n      console.log(args);\n\n      // eslint-disable-next-line no-console\n      console.log(event);\n    },\n    onCellKeyDown: (args: TableCellKeyDownArgs<Row>, event: TableCellKeyboardEvent) => {\n      // eslint-disable-next-line no-console\n      console.log(args);\n\n      // eslint-disable-next-line no-console\n      console.log(event);\n    }\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'This story showcases all callback functions related to cells.\\n' + 'It implements the following callback functions:\\n' + '- onCellClick \\n- onCellDoubleClick \\n- onCellContextMenu \\n- onCellKeyDown \\n\\n' + 'Check the developer console for output'\n      }\n    }\n  }\n};\nexport const Direction: Story = {\n  args: {\n    columns: [{\n      key: 'id',\n      name: 'ID'\n    }, {\n      key: 'title',\n      name: 'Title (editable)',\n      editable: true\n    }],\n    rows: [{\n      id: '0',\n      title: 'Lorem ipsum dolor sit amet'\n    }, {\n      id: '1',\n      title: 'Consectetur adipiscing elit'\n    }, {\n      id: '2',\n      title: 'Pellentesque suscipit tortor est'\n    }, {\n      id: '3',\n      title: 'Ut egestas massa aliquam a'\n    }, {\n      id: '4',\n      title: 'Nulla egestas vestibulum felis a venenatis'\n    }, {\n      id: '5',\n      title: 'Sed aliquet pulvinar neque'\n    }],\n    direction: 'rtl'\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: \"This story showcases the 'direction' prop. It can be set to either 'ltr' for left\" + \" to right behavior or 'rtl' for right to left behavior.\"\n      }\n    }\n  }\n};\nconst generateRows = (): Row[] => {\n  const rows: Row[] = [];\n  for (let i = 0; i < 1000; i++) {\n    rows.push({\n      id: i.toString(),\n      title: 'Lorem ipsum dolor sit amet'\n    });\n  }\n  return rows;\n};\nexport const Virtualization: Story = {\n  args: {\n    columns: [{\n      key: 'id',\n      name: 'ID'\n    }, {\n      key: 'title',\n      name: 'Title (editable)',\n      editable: true\n    }],\n    rows: generateRows(),\n    enableVirtualization: true\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'This story showcases virtualization in large tables'\n      }\n    }\n  }\n};\nexport const MiscellaneousFunctions: Story = {\n  args: {\n    columns: [{\n      key: 'id',\n      name: 'ID'\n    }, {\n      key: 'title',\n      name: 'Title (editable)',\n      editable: true\n    }],\n    rows: [{\n      id: '0',\n      title: 'Lorem ipsum dolor sit amet'\n    }, {\n      id: '1',\n      title: 'Consectetur adipiscing elit'\n    }, {\n      id: '2',\n      title: 'Pellentesque suscipit tortor est'\n    }, {\n      id: '3',\n      title: 'Ut egestas massa aliquam a'\n    }, {\n      id: '4',\n      title: 'Nulla egestas vestibulum felis a venenatis'\n    }, {\n      id: '5',\n      title: 'Sed aliquet pulvinar neque'\n    }, {\n      id: '6',\n      title: 'Lorem ipsum dolor sit amet'\n    }, {\n      id: '7',\n      title: 'Consectetur adipiscing elit'\n    }, {\n      id: '8',\n      title: 'Pellentesque suscipit tortor est'\n    }, {\n      id: '9',\n      title: 'Ut egestas massa aliquam a'\n    }, {\n      id: '10',\n      title: 'Nulla egestas vestibulum felis a venenatis'\n    }, {\n      id: '11',\n      title: 'Sed aliquet pulvinar neque'\n    }, {\n      id: '12',\n      title: 'Lorem ipsum dolor sit amet'\n    }, {\n      id: '13',\n      title: 'Consectetur adipiscing elit'\n    }, {\n      id: '14',\n      title: 'Pellentesque suscipit tortor est'\n    }, {\n      id: '15',\n      title: 'Ut egestas massa aliquam a'\n    }, {\n      id: '16',\n      title: 'Nulla egestas vestibulum felis a venenatis'\n    }, {\n      id: '17',\n      title: 'Sed aliquet pulvinar neque'\n    }],\n    onScroll: (event: UIEvent<HTMLDivElement>) => {\n      // eslint-disable-next-line no-console\n      console.log(event);\n    },\n    onCopy: ({\n      sourceRow,\n      sourceColumnKey\n    }: TableCopyEvent<Row>) => {\n      if (window.isSecureContext) {\n        navigator.clipboard.writeText(sourceRow[(sourceColumnKey as keyof Row)]);\n      }\n    },\n    onPaste: ({\n      sourceColumnKey,\n      sourceRow,\n      targetColumnKey,\n      targetRow\n    }: TablePasteEvent<Row>) => {\n      const incompatibleColumns = ['email', 'zipCode', 'date'];\n      if (sourceColumnKey === 'avatar' || ['id', 'avatar'].includes(targetColumnKey) || (incompatibleColumns.includes(targetColumnKey) || incompatibleColumns.includes(sourceColumnKey)) && sourceColumnKey !== targetColumnKey) {\n        return targetRow;\n      }\n      return {\n        ...targetRow,\n        [targetColumnKey]: sourceRow[(sourceColumnKey as keyof Row)]\n      };\n    }\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'This story showcases miscellaneous callback functions.\\n' + 'It implements the following callback functions:\\n' + '- onScroll \\n- onCopy \\n- onPaste \\n\\n' + 'Check the developer console for output'\n      }\n    }\n  }\n};\nexport const CustomClassNames: Story = {\n  args: {\n    columns: [{\n      key: 'id',\n      name: 'ID'\n    }, {\n      key: 'title',\n      name: 'Title (editable)',\n      editable: true\n    }],\n    rows: [{\n      id: '0',\n      title: 'Lorem ipsum dolor sit amet'\n    }, {\n      id: '1',\n      title: 'Consectetur adipiscing elit'\n    }, {\n      id: '2',\n      title: 'Pellentesque suscipit tortor est'\n    }, {\n      id: '3',\n      title: 'Ut egestas massa aliquam a'\n    }, {\n      id: '4',\n      title: 'Nulla egestas vestibulum felis a venenatis'\n    }, {\n      id: '5',\n      title: 'Sed aliquet pulvinar neque'\n    }],\n    className: 'paratext'\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'This story showcases how custom CSS classes can be used'\n      }\n    }\n  }\n};\nfunction CustomTextEditor<R>({\n  onRowChange,\n  row,\n  column\n}: TableEditorProps<R>): ReactElement {\n  const changeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    onRowChange({\n      ...row,\n      [column.key]: e.target.value\n    });\n  };\n  return <input onChange={changeHandler} />;\n}\nexport const CustomRenderEditCell: Story = {\n  args: {\n    columns: [{\n      key: 'id',\n      name: 'ID'\n    }, {\n      key: 'title',\n      name: 'Title (The title for id == 0 is editable)',\n      renderEditCell: CustomTextEditor<Row>,\n      editable: (row: Row) => {\n        return +row.id === 0;\n      }\n    }],\n    rows: [{\n      id: '0',\n      title: 'Lorem ipsum dolor sit amet'\n    }, {\n      id: '1',\n      title: 'Consectetur adipiscing elit'\n    }, {\n      id: '2',\n      title: 'Pellentesque suscipit tortor est'\n    }, {\n      id: '3',\n      title: 'Ut egestas massa aliquam a'\n    }, {\n      id: '4',\n      title: 'Nulla egestas vestibulum felis a venenatis'\n    }, {\n      id: '5',\n      title: 'Sed aliquet pulvinar neque'\n    }]\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'This story showcases how a custom cell editor can be set'\n      }\n    }\n  }\n};\nDefault.parameters = {\n  ...Default.parameters,\n  docs: {\n    ...Default.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    columns: [{\\n      key: 'id',\\n      name: 'ID'\\n    }, {\\n      key: 'title',\\n      name: 'Title'\\n    }],\\n    rows: [{\\n      id: '0',\\n      title: 'Loremm ipsum dolor sit amet'\\n    }, {\\n      id: '1',\\n      title: 'Consectetur adipiscing elit'\\n    }, {\\n      id: '2',\\n      title: 'Pellentesque suscipit tortor est'\\n    }, {\\n      id: '3',\\n      title: 'Ut egestas massa aliquam a'\\n    }, {\\n      id: '4',\\n      title: 'Nulla egestas vestibulum felis a venenatis'\\n    }, {\\n      id: '5',\\n      title: 'Sed aliquet pulvinar neque'\\n    }]\\n  },\\n  parameters: {\\n    docs: {\\n      description: {\\n        story: \\\"This is what the table looks like when only 'columns' and 'rows' are provided.\\\\n\\\" + 'These props are always required.\\\\n' + 'Default behavior is:\\\\n' + '- Resizable, sortable, non-editable, non-frozen columns\\\\n' + '- Non-selectable rows'\\n      }\\n    }\\n  }\\n}\",\n      ...Default.parameters?.docs?.source\n    }\n  }\n};\nCustomizedColumns.parameters = {\n  ...CustomizedColumns.parameters,\n  docs: {\n    ...CustomizedColumns.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    columns: [{\\n      key: 'id',\\n      name: 'ID',\\n      width: 300,\\n      minWidth: 200,\\n      maxWidth: 400,\\n      editable: true,\\n      frozen: false,\\n      resizable: true,\\n      sortable: true\\n    }, {\\n      key: 'title',\\n      name: 'Title',\\n      width: 300,\\n      minWidth: 200,\\n      maxWidth: 400,\\n      editable: false,\\n      frozen: false,\\n      resizable: true,\\n      sortable: true\\n    }],\\n    rows: [{\\n      id: '0',\\n      title: 'Lorem ipsum dolor sit amet'\\n    }, {\\n      id: '1',\\n      title: 'Consectetur adipiscing elit'\\n    }, {\\n      id: '2',\\n      title: 'Pellentesque suscipit tortor est'\\n    }, {\\n      id: '3',\\n      title: 'Ut egestas massa aliquam a'\\n    }, {\\n      id: '4',\\n      title: 'Nulla egestas vestibulum felis a venenatis'\\n    }, {\\n      id: '5',\\n      title: 'Sed aliquet pulvinar neque'\\n    }]\\n  },\\n  parameters: {\\n    docs: {\\n      description: {\\n        story: \\\"This story showcases all possible props that can be set on 'columns'.\\\\n\\\" + \\\"Note that the 'editable' prop is meaningless when the 'editor' prop is not set.\\\\n\\\" + \\\"When an 'editor' is provided, the 'editable' prop will default to 'true'\\\"\\n      }\\n    }\\n  }\\n}\",\n      ...CustomizedColumns.parameters?.docs?.source\n    }\n  }\n};\nCustomizedColumnDefaults.parameters = {\n  ...CustomizedColumnDefaults.parameters,\n  docs: {\n    ...CustomizedColumnDefaults.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    columns: [{\\n      key: 'id',\\n      name: 'ID'\\n    }, {\\n      key: 'title',\\n      name: 'Title'\\n    }],\\n    rows: [{\\n      id: '0',\\n      title: 'Lorem ipsum dolor sit amet'\\n    }, {\\n      id: '1',\\n      title: 'Consectetur adipiscing elit'\\n    }, {\\n      id: '2',\\n      title: 'Pellentesque suscipit tortor est'\\n    }, {\\n      id: '3',\\n      title: 'Ut egestas massa aliquam a'\\n    }, {\\n      id: '4',\\n      title: 'Nulla egestas vestibulum felis a venenatis'\\n    }, {\\n      id: '5',\\n      title: 'Sed aliquet pulvinar neque'\\n    }],\\n    defaultColumnWidth: 300,\\n    defaultColumnMinWidth: 100,\\n    defaultColumnMaxWidth: 500,\\n    defaultColumnSortable: false,\\n    defaultColumnResizable: true\\n  },\\n  parameters: {\\n    docs: {\\n      description: {\\n        story: \\\"This story showcases all possible defaults for 'column' props that can be set.\\\\n\\\" + 'These defaults will be set to all columns and can be overridden by setting props' + ' on the individual columns'\\n      }\\n    }\\n  }\\n}\",\n      ...CustomizedColumnDefaults.parameters?.docs?.source\n    }\n  }\n};\nColumnCallBackFunctions.parameters = {\n  ...ColumnCallBackFunctions.parameters,\n  docs: {\n    ...ColumnCallBackFunctions.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    columns: [{\\n      key: 'id',\\n      name: 'ID (sortable)',\\n      sortable: true\\n    }, {\\n      key: 'title',\\n      name: 'Title (sortable & editable)',\\n      sortable: true\\n    }],\\n    rows: [{\\n      id: '0',\\n      title: 'Lorem ipsum dolor sit amet'\\n    }, {\\n      id: '1',\\n      title: 'Consectetur adipiscing elit'\\n    }, {\\n      id: '2',\\n      title: 'Pellentesque suscipit tortor est'\\n    }, {\\n      id: '3',\\n      title: 'Ut egestas massa aliquam a'\\n    }, {\\n      id: '4',\\n      title: 'Nulla egestas vestibulum felis a venenatis'\\n    }, {\\n      id: '5',\\n      title: 'Sed aliquet pulvinar neque'\\n    }],\\n    onColumnResize: () => {\\n      // eslint-disable-next-line no-console\\n      console.log('Column resized');\\n    }\\n  },\\n  parameters: {\\n    docs: {\\n      description: {\\n        story: \\\"This story showcases the 'onColumnResize' callback function.\\\\n\\\" + 'Check the developer console for output.'\\n      }\\n    }\\n  }\\n}\",\n      ...ColumnCallBackFunctions.parameters?.docs?.source\n    }\n  }\n};\nCustomizedRows.parameters = {\n  ...CustomizedRows.parameters,\n  docs: {\n    ...CustomizedRows.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    columns: [{\\n      key: 'id',\\n      name: 'ID'\\n    }, {\\n      key: 'title',\\n      name: 'Title (editable)',\\n      editable: true\\n    }],\\n    rows: [{\\n      id: '0',\\n      title: 'Lorem ipsum dolor sit amet'\\n    }, {\\n      id: '1',\\n      title: 'Consectetur adipiscing elit'\\n    }, {\\n      id: '2',\\n      title: 'Pellentesque suscipit tortor est'\\n    }, {\\n      id: '3',\\n      title: 'Ut egestas massa aliquam a'\\n    }, {\\n      id: '4',\\n      title: 'Nulla egestas vestibulum felis a venenatis'\\n    }, {\\n      id: '5',\\n      title: 'Sed aliquet pulvinar neque'\\n    }],\\n    enableSelectColumn: true,\\n    rowHeight: 50,\\n    headerRowHeight: 100\\n  },\\n  parameters: {\\n    docs: {\\n      description: {\\n        story: 'This story showcases how rows can be customized.'\\n      }\\n    }\\n  }\\n}\",\n      ...CustomizedRows.parameters?.docs?.source\n    }\n  }\n};\nCellCallbackFunctions.parameters = {\n  ...CellCallbackFunctions.parameters,\n  docs: {\n    ...CellCallbackFunctions.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    columns: [{\\n      key: 'id',\\n      name: 'ID'\\n    }, {\\n      key: 'title',\\n      name: 'Title (editable)',\\n      editable: true\\n    }],\\n    rows: [{\\n      id: '0',\\n      title: 'Lorem ipsum dolor sit amet'\\n    }, {\\n      id: '1',\\n      title: 'Consectetur adipiscing elit'\\n    }, {\\n      id: '2',\\n      title: 'Pellentesque suscipit tortor est'\\n    }, {\\n      id: '3',\\n      title: 'Ut egestas massa aliquam a'\\n    }, {\\n      id: '4',\\n      title: 'Nulla egestas vestibulum felis a venenatis'\\n    }, {\\n      id: '5',\\n      title: 'Sed aliquet pulvinar neque'\\n    }],\\n    onCellClick: (args: TableCellClickArgs<Row>, event: TableCellMouseEvent) => {\\n      // eslint-disable-next-line no-console\\n      console.log(args);\\n\\n      // eslint-disable-next-line no-console\\n      console.log(event);\\n    },\\n    onCellDoubleClick: (args: TableCellClickArgs<Row>, event: TableCellMouseEvent) => {\\n      // eslint-disable-next-line no-console\\n      console.log(args);\\n\\n      // eslint-disable-next-line no-console\\n      console.log(event);\\n    },\\n    onCellContextMenu: (args: TableCellClickArgs<Row>, event: TableCellMouseEvent) => {\\n      // eslint-disable-next-line no-console\\n      console.log(args);\\n\\n      // eslint-disable-next-line no-console\\n      console.log(event);\\n    },\\n    onCellKeyDown: (args: TableCellKeyDownArgs<Row>, event: TableCellKeyboardEvent) => {\\n      // eslint-disable-next-line no-console\\n      console.log(args);\\n\\n      // eslint-disable-next-line no-console\\n      console.log(event);\\n    }\\n  },\\n  parameters: {\\n    docs: {\\n      description: {\\n        story: 'This story showcases all callback functions related to cells.\\\\n' + 'It implements the following callback functions:\\\\n' + '- onCellClick \\\\n- onCellDoubleClick \\\\n- onCellContextMenu \\\\n- onCellKeyDown \\\\n\\\\n' + 'Check the developer console for output'\\n      }\\n    }\\n  }\\n}\",\n      ...CellCallbackFunctions.parameters?.docs?.source\n    }\n  }\n};\nDirection.parameters = {\n  ...Direction.parameters,\n  docs: {\n    ...Direction.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    columns: [{\\n      key: 'id',\\n      name: 'ID'\\n    }, {\\n      key: 'title',\\n      name: 'Title (editable)',\\n      editable: true\\n    }],\\n    rows: [{\\n      id: '0',\\n      title: 'Lorem ipsum dolor sit amet'\\n    }, {\\n      id: '1',\\n      title: 'Consectetur adipiscing elit'\\n    }, {\\n      id: '2',\\n      title: 'Pellentesque suscipit tortor est'\\n    }, {\\n      id: '3',\\n      title: 'Ut egestas massa aliquam a'\\n    }, {\\n      id: '4',\\n      title: 'Nulla egestas vestibulum felis a venenatis'\\n    }, {\\n      id: '5',\\n      title: 'Sed aliquet pulvinar neque'\\n    }],\\n    direction: 'rtl'\\n  },\\n  parameters: {\\n    docs: {\\n      description: {\\n        story: \\\"This story showcases the 'direction' prop. It can be set to either 'ltr' for left\\\" + \\\" to right behavior or 'rtl' for right to left behavior.\\\"\\n      }\\n    }\\n  }\\n}\",\n      ...Direction.parameters?.docs?.source\n    }\n  }\n};\nVirtualization.parameters = {\n  ...Virtualization.parameters,\n  docs: {\n    ...Virtualization.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    columns: [{\\n      key: 'id',\\n      name: 'ID'\\n    }, {\\n      key: 'title',\\n      name: 'Title (editable)',\\n      editable: true\\n    }],\\n    rows: generateRows(),\\n    enableVirtualization: true\\n  },\\n  parameters: {\\n    docs: {\\n      description: {\\n        story: 'This story showcases virtualization in large tables'\\n      }\\n    }\\n  }\\n}\",\n      ...Virtualization.parameters?.docs?.source\n    }\n  }\n};\nMiscellaneousFunctions.parameters = {\n  ...MiscellaneousFunctions.parameters,\n  docs: {\n    ...MiscellaneousFunctions.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    columns: [{\\n      key: 'id',\\n      name: 'ID'\\n    }, {\\n      key: 'title',\\n      name: 'Title (editable)',\\n      editable: true\\n    }],\\n    rows: [{\\n      id: '0',\\n      title: 'Lorem ipsum dolor sit amet'\\n    }, {\\n      id: '1',\\n      title: 'Consectetur adipiscing elit'\\n    }, {\\n      id: '2',\\n      title: 'Pellentesque suscipit tortor est'\\n    }, {\\n      id: '3',\\n      title: 'Ut egestas massa aliquam a'\\n    }, {\\n      id: '4',\\n      title: 'Nulla egestas vestibulum felis a venenatis'\\n    }, {\\n      id: '5',\\n      title: 'Sed aliquet pulvinar neque'\\n    }, {\\n      id: '6',\\n      title: 'Lorem ipsum dolor sit amet'\\n    }, {\\n      id: '7',\\n      title: 'Consectetur adipiscing elit'\\n    }, {\\n      id: '8',\\n      title: 'Pellentesque suscipit tortor est'\\n    }, {\\n      id: '9',\\n      title: 'Ut egestas massa aliquam a'\\n    }, {\\n      id: '10',\\n      title: 'Nulla egestas vestibulum felis a venenatis'\\n    }, {\\n      id: '11',\\n      title: 'Sed aliquet pulvinar neque'\\n    }, {\\n      id: '12',\\n      title: 'Lorem ipsum dolor sit amet'\\n    }, {\\n      id: '13',\\n      title: 'Consectetur adipiscing elit'\\n    }, {\\n      id: '14',\\n      title: 'Pellentesque suscipit tortor est'\\n    }, {\\n      id: '15',\\n      title: 'Ut egestas massa aliquam a'\\n    }, {\\n      id: '16',\\n      title: 'Nulla egestas vestibulum felis a venenatis'\\n    }, {\\n      id: '17',\\n      title: 'Sed aliquet pulvinar neque'\\n    }],\\n    onScroll: (event: UIEvent<HTMLDivElement>) => {\\n      // eslint-disable-next-line no-console\\n      console.log(event);\\n    },\\n    onCopy: ({\\n      sourceRow,\\n      sourceColumnKey\\n    }: TableCopyEvent<Row>) => {\\n      if (window.isSecureContext) {\\n        navigator.clipboard.writeText(sourceRow[(sourceColumnKey as keyof Row)]);\\n      }\\n    },\\n    onPaste: ({\\n      sourceColumnKey,\\n      sourceRow,\\n      targetColumnKey,\\n      targetRow\\n    }: TablePasteEvent<Row>) => {\\n      const incompatibleColumns = ['email', 'zipCode', 'date'];\\n      if (sourceColumnKey === 'avatar' || ['id', 'avatar'].includes(targetColumnKey) || (incompatibleColumns.includes(targetColumnKey) || incompatibleColumns.includes(sourceColumnKey)) && sourceColumnKey !== targetColumnKey) {\\n        return targetRow;\\n      }\\n      return {\\n        ...targetRow,\\n        [targetColumnKey]: sourceRow[(sourceColumnKey as keyof Row)]\\n      };\\n    }\\n  },\\n  parameters: {\\n    docs: {\\n      description: {\\n        story: 'This story showcases miscellaneous callback functions.\\\\n' + 'It implements the following callback functions:\\\\n' + '- onScroll \\\\n- onCopy \\\\n- onPaste \\\\n\\\\n' + 'Check the developer console for output'\\n      }\\n    }\\n  }\\n}\",\n      ...MiscellaneousFunctions.parameters?.docs?.source\n    }\n  }\n};\nCustomClassNames.parameters = {\n  ...CustomClassNames.parameters,\n  docs: {\n    ...CustomClassNames.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    columns: [{\\n      key: 'id',\\n      name: 'ID'\\n    }, {\\n      key: 'title',\\n      name: 'Title (editable)',\\n      editable: true\\n    }],\\n    rows: [{\\n      id: '0',\\n      title: 'Lorem ipsum dolor sit amet'\\n    }, {\\n      id: '1',\\n      title: 'Consectetur adipiscing elit'\\n    }, {\\n      id: '2',\\n      title: 'Pellentesque suscipit tortor est'\\n    }, {\\n      id: '3',\\n      title: 'Ut egestas massa aliquam a'\\n    }, {\\n      id: '4',\\n      title: 'Nulla egestas vestibulum felis a venenatis'\\n    }, {\\n      id: '5',\\n      title: 'Sed aliquet pulvinar neque'\\n    }],\\n    className: 'paratext'\\n  },\\n  parameters: {\\n    docs: {\\n      description: {\\n        story: 'This story showcases how custom CSS classes can be used'\\n      }\\n    }\\n  }\\n}\",\n      ...CustomClassNames.parameters?.docs?.source\n    }\n  }\n};\nCustomRenderEditCell.parameters = {\n  ...CustomRenderEditCell.parameters,\n  docs: {\n    ...CustomRenderEditCell.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    columns: [{\\n      key: 'id',\\n      name: 'ID'\\n    }, {\\n      key: 'title',\\n      name: 'Title (The title for id == 0 is editable)',\\n      renderEditCell: CustomTextEditor<Row>,\\n      editable: (row: Row) => {\\n        return +row.id === 0;\\n      }\\n    }],\\n    rows: [{\\n      id: '0',\\n      title: 'Lorem ipsum dolor sit amet'\\n    }, {\\n      id: '1',\\n      title: 'Consectetur adipiscing elit'\\n    }, {\\n      id: '2',\\n      title: 'Pellentesque suscipit tortor est'\\n    }, {\\n      id: '3',\\n      title: 'Ut egestas massa aliquam a'\\n    }, {\\n      id: '4',\\n      title: 'Nulla egestas vestibulum felis a venenatis'\\n    }, {\\n      id: '5',\\n      title: 'Sed aliquet pulvinar neque'\\n    }]\\n  },\\n  parameters: {\\n    docs: {\\n      description: {\\n        story: 'This story showcases how a custom cell editor can be set'\\n      }\\n    }\\n  }\\n}\",\n      ...CustomRenderEditCell.parameters?.docs?.source\n    }\n  }\n};"],"names":["title","component","tags","args","rowKeyGetter","row","id","argTypes","defaultColumnWidth","control","defaultColumnMinWidth","defaultColumnMaxWidth","defaultColumnSortable","defaultColumnResizable","rowHeight","headerRowHeight","direction","options","mapping","type","labels","enableVirtualization","className","decorators","TableDecorator","Story","updateArgs","getComparator","sortColumn","a","b","localeCompare","Error","setRows","rows","onSelectedRowsChange","selectedRows","onSortColumnsChange","sortColumns","length","sort","compResult","columnKey","comparator","onRowsChange","Default","columns","key","name","parameters","docs","description","story","CustomizedColumns","width","minWidth","maxWidth","editable","frozen","resizable","sortable","CustomizedColumnDefaults","ColumnCallBackFunctions","onColumnResize","console","log","CustomizedRows","enableSelectColumn","CellCallbackFunctions","onCellClick","event","onCellDoubleClick","onCellContextMenu","onCellKeyDown","Direction","Virtualization","i","push","toString","generateRows","MiscellaneousFunctions","onScroll","onCopy","sourceRow","sourceColumnKey","window","isSecureContext","navigator","clipboard","writeText","onPaste","targetColumnKey","targetRow","incompatibleColumns","includes","CustomClassNames","CustomRenderEditCell","renderEditCell","CustomTextEditor","onChange","e","onRowChange","column","target","value","source","originalSource"],"sourceRoot":""}