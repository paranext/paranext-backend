"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[933],{"./src/stories/table.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CellCallbackFunctions:()=>CellCallbackFunctions,ColumnCallBackFunctions:()=>ColumnCallBackFunctions,CustomClassNames:()=>CustomClassNames,CustomRenderEditCell:()=>CustomRenderEditCell,CustomizedColumnDefaults:()=>CustomizedColumnDefaults,CustomizedColumns:()=>CustomizedColumns,CustomizedRows:()=>CustomizedRows,Default:()=>Default,Direction:()=>Direction,MiscellaneousFunctions:()=>MiscellaneousFunctions,Virtualization:()=>Virtualization,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/jsx-runtime.js"),_storybook_client_api__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/preview-api/dist/chunk-2WNKQWTL.mjs");const __WEBPACK_DEFAULT_EXPORT__={title:"Basics/Table",component:__webpack_require__("./lib/papi-components/dist/index.es.js").iA,tags:["autodocs"],args:{rowKeyGetter:row=>row.id},argTypes:{defaultColumnWidth:{control:"number"},defaultColumnMinWidth:{control:"number"},defaultColumnMaxWidth:{control:"number"},defaultColumnSortable:{control:"boolean"},defaultColumnResizable:{control:"boolean"},rowHeight:{control:"number"},headerRowHeight:{control:"number"},direction:{options:[0,1],mapping:["ltr","rtl"],control:{type:"select",labels:["LTR","RTL"]}},enableVirtualization:{control:"boolean"},className:{control:"text"}},decorators:[function TableDecorator(Story){const[args,updateArgs]=(0,_storybook_client_api__WEBPACK_IMPORTED_MODULE_2__.D8)();function getComparator(sortColumn){switch(sortColumn){case"title":return(a,b)=>a[sortColumn].localeCompare(b[sortColumn]);case"id":return(a,b)=>+a[sortColumn]-+b[sortColumn];default:throw new Error(`unsupported sortColumn: "${sortColumn}"`)}}const setRows=rows=>{updateArgs({rows})};return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Story,{args:{...args,onSelectedRowsChange:rows=>{updateArgs({selectedRows:rows})},onSortColumnsChange:sortColumns=>{updateArgs({sortColumns}),0===sortColumns.length?setRows(args.rows):setRows(args.rows.sort(((a,b)=>{for(const sort of sortColumns){const compResult=getComparator(sort.columnKey)(a,b);if(0!==compResult)return"ASC"===sort.direction?compResult:-compResult}throw new Error("An issue occurred while sorting table data")})))},onRowsChange:setRows}})}]},Default={args:{columns:[{key:"id",name:"ID"},{key:"title",name:"Title"}],rows:[{id:"0",title:"Loremm ipsum dolor sit amet"},{id:"1",title:"Consectetur adipiscing elit"},{id:"2",title:"Pellentesque suscipit tortor est"},{id:"3",title:"Ut egestas massa aliquam a"},{id:"4",title:"Nulla egestas vestibulum felis a venenatis"},{id:"5",title:"Sed aliquet pulvinar neque"}]},parameters:{docs:{description:{story:"This is what the table looks like when only 'columns' and 'rows' are provided.\nThese props are always required.\nDefault behavior is:\n- Resizable, sortable, non-editable, non-frozen columns\n- Non-selectable rows"}}}},CustomizedColumns={args:{columns:[{key:"id",name:"ID",width:300,minWidth:200,maxWidth:400,editable:!0,frozen:!1,resizable:!0,sortable:!0},{key:"title",name:"Title",width:300,minWidth:200,maxWidth:400,editable:!1,frozen:!1,resizable:!0,sortable:!0}],rows:[{id:"0",title:"Lorem ipsum dolor sit amet"},{id:"1",title:"Consectetur adipiscing elit"},{id:"2",title:"Pellentesque suscipit tortor est"},{id:"3",title:"Ut egestas massa aliquam a"},{id:"4",title:"Nulla egestas vestibulum felis a venenatis"},{id:"5",title:"Sed aliquet pulvinar neque"}]},parameters:{docs:{description:{story:"This story showcases all possible props that can be set on 'columns'.\nNote that the 'editable' prop is meaningless when the 'editor' prop is not set.\nWhen an 'editor' is provided, the 'editable' prop will default to 'true'"}}}},CustomizedColumnDefaults={args:{columns:[{key:"id",name:"ID"},{key:"title",name:"Title"}],rows:[{id:"0",title:"Lorem ipsum dolor sit amet"},{id:"1",title:"Consectetur adipiscing elit"},{id:"2",title:"Pellentesque suscipit tortor est"},{id:"3",title:"Ut egestas massa aliquam a"},{id:"4",title:"Nulla egestas vestibulum felis a venenatis"},{id:"5",title:"Sed aliquet pulvinar neque"}],defaultColumnWidth:300,defaultColumnMinWidth:100,defaultColumnMaxWidth:500,defaultColumnSortable:!1,defaultColumnResizable:!0},parameters:{docs:{description:{story:"This story showcases all possible defaults for 'column' props that can be set.\nThese defaults will be set to all columns and can be overridden by setting props on the individual columns"}}}},ColumnCallBackFunctions={args:{columns:[{key:"id",name:"ID (sortable)",sortable:!0},{key:"title",name:"Title (sortable & editable)",sortable:!0}],rows:[{id:"0",title:"Lorem ipsum dolor sit amet"},{id:"1",title:"Consectetur adipiscing elit"},{id:"2",title:"Pellentesque suscipit tortor est"},{id:"3",title:"Ut egestas massa aliquam a"},{id:"4",title:"Nulla egestas vestibulum felis a venenatis"},{id:"5",title:"Sed aliquet pulvinar neque"}],onColumnResize:()=>{console.log("Column resized")}},parameters:{docs:{description:{story:"This story showcases the 'onColumnResize' callback function.\nCheck the developer console for output."}}}},CustomizedRows={args:{columns:[{key:"id",name:"ID"},{key:"title",name:"Title (editable)",editable:!0}],rows:[{id:"0",title:"Lorem ipsum dolor sit amet"},{id:"1",title:"Consectetur adipiscing elit"},{id:"2",title:"Pellentesque suscipit tortor est"},{id:"3",title:"Ut egestas massa aliquam a"},{id:"4",title:"Nulla egestas vestibulum felis a venenatis"},{id:"5",title:"Sed aliquet pulvinar neque"}],enableSelectColumn:!0,rowHeight:50,headerRowHeight:100},parameters:{docs:{description:{story:"This story showcases how rows can be customized."}}}},CellCallbackFunctions={args:{columns:[{key:"id",name:"ID"},{key:"title",name:"Title (editable)",editable:!0}],rows:[{id:"0",title:"Lorem ipsum dolor sit amet"},{id:"1",title:"Consectetur adipiscing elit"},{id:"2",title:"Pellentesque suscipit tortor est"},{id:"3",title:"Ut egestas massa aliquam a"},{id:"4",title:"Nulla egestas vestibulum felis a venenatis"},{id:"5",title:"Sed aliquet pulvinar neque"}],onCellClick:(args,event)=>{console.log(args),console.log(event)},onCellDoubleClick:(args,event)=>{console.log(args),console.log(event)},onCellContextMenu:(args,event)=>{console.log(args),console.log(event)},onCellKeyDown:(args,event)=>{console.log(args),console.log(event)}},parameters:{docs:{description:{story:"This story showcases all callback functions related to cells.\nIt implements the following callback functions:\n- onCellClick \n- onCellDoubleClick \n- onCellContextMenu \n- onCellKeyDown \n\nCheck the developer console for output"}}}},Direction={args:{columns:[{key:"id",name:"ID"},{key:"title",name:"Title (editable)",editable:!0}],rows:[{id:"0",title:"Lorem ipsum dolor sit amet"},{id:"1",title:"Consectetur adipiscing elit"},{id:"2",title:"Pellentesque suscipit tortor est"},{id:"3",title:"Ut egestas massa aliquam a"},{id:"4",title:"Nulla egestas vestibulum felis a venenatis"},{id:"5",title:"Sed aliquet pulvinar neque"}],direction:"rtl"},parameters:{docs:{description:{story:"This story showcases the 'direction' prop. It can be set to either 'ltr' for left to right behavior or 'rtl' for right to left behavior."}}}},Virtualization={args:{columns:[{key:"id",name:"ID"},{key:"title",name:"Title (editable)",editable:!0}],rows:(()=>{const rows=[];for(let i=0;i<1e3;i++)rows.push({id:i.toString(),title:"Lorem ipsum dolor sit amet"});return rows})(),enableVirtualization:!0},parameters:{docs:{description:{story:"This story showcases virtualization in large tables"}}}},MiscellaneousFunctions={args:{columns:[{key:"id",name:"ID"},{key:"title",name:"Title (editable)",editable:!0}],rows:[{id:"0",title:"Lorem ipsum dolor sit amet"},{id:"1",title:"Consectetur adipiscing elit"},{id:"2",title:"Pellentesque suscipit tortor est"},{id:"3",title:"Ut egestas massa aliquam a"},{id:"4",title:"Nulla egestas vestibulum felis a venenatis"},{id:"5",title:"Sed aliquet pulvinar neque"},{id:"6",title:"Lorem ipsum dolor sit amet"},{id:"7",title:"Consectetur adipiscing elit"},{id:"8",title:"Pellentesque suscipit tortor est"},{id:"9",title:"Ut egestas massa aliquam a"},{id:"10",title:"Nulla egestas vestibulum felis a venenatis"},{id:"11",title:"Sed aliquet pulvinar neque"},{id:"12",title:"Lorem ipsum dolor sit amet"},{id:"13",title:"Consectetur adipiscing elit"},{id:"14",title:"Pellentesque suscipit tortor est"},{id:"15",title:"Ut egestas massa aliquam a"},{id:"16",title:"Nulla egestas vestibulum felis a venenatis"},{id:"17",title:"Sed aliquet pulvinar neque"}],onScroll:event=>{console.log(event)},onCopy:({sourceRow,sourceColumnKey})=>{window.isSecureContext&&navigator.clipboard.writeText(sourceRow[sourceColumnKey])},onPaste:({sourceColumnKey,sourceRow,targetColumnKey,targetRow})=>{const incompatibleColumns=["email","zipCode","date"];return"avatar"===sourceColumnKey||["id","avatar"].includes(targetColumnKey)||(incompatibleColumns.includes(targetColumnKey)||incompatibleColumns.includes(sourceColumnKey))&&sourceColumnKey!==targetColumnKey?targetRow:{...targetRow,[targetColumnKey]:sourceRow[sourceColumnKey]}}},parameters:{docs:{description:{story:"This story showcases miscellaneous callback functions.\nIt implements the following callback functions:\n- onScroll \n- onCopy \n- onPaste \n\nCheck the developer console for output"}}}},CustomClassNames={args:{columns:[{key:"id",name:"ID"},{key:"title",name:"Title (editable)",editable:!0}],rows:[{id:"0",title:"Lorem ipsum dolor sit amet"},{id:"1",title:"Consectetur adipiscing elit"},{id:"2",title:"Pellentesque suscipit tortor est"},{id:"3",title:"Ut egestas massa aliquam a"},{id:"4",title:"Nulla egestas vestibulum felis a venenatis"},{id:"5",title:"Sed aliquet pulvinar neque"}],className:"paratext"},parameters:{docs:{description:{story:"This story showcases how custom CSS classes can be used"}}}};const CustomRenderEditCell={args:{columns:[{key:"id",name:"ID"},{key:"title",name:"Title (The title for id == 0 is editable)",renderEditCell:function CustomTextEditor({onRowChange,row,column}){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("input",{onChange:e=>{onRowChange({...row,[column.key]:e.target.value})}})},editable:row=>0==+row.id}],rows:[{id:"0",title:"Lorem ipsum dolor sit amet"},{id:"1",title:"Consectetur adipiscing elit"},{id:"2",title:"Pellentesque suscipit tortor est"},{id:"3",title:"Ut egestas massa aliquam a"},{id:"4",title:"Nulla egestas vestibulum felis a venenatis"},{id:"5",title:"Sed aliquet pulvinar neque"}]},parameters:{docs:{description:{story:"This story showcases how a custom cell editor can be set"}}}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  args: {\n    columns: [{\n      key: 'id',\n      name: 'ID'\n    }, {\n      key: 'title',\n      name: 'Title'\n    }],\n    rows: [{\n      id: '0',\n      title: 'Loremm ipsum dolor sit amet'\n    }, {\n      id: '1',\n      title: 'Consectetur adipiscing elit'\n    }, {\n      id: '2',\n      title: 'Pellentesque suscipit tortor est'\n    }, {\n      id: '3',\n      title: 'Ut egestas massa aliquam a'\n    }, {\n      id: '4',\n      title: 'Nulla egestas vestibulum felis a venenatis'\n    }, {\n      id: '5',\n      title: 'Sed aliquet pulvinar neque'\n    }]\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: \"This is what the table looks like when only 'columns' and 'rows' are provided.\\n\" + 'These props are always required.\\n' + 'Default behavior is:\\n' + '- Resizable, sortable, non-editable, non-frozen columns\\n' + '- Non-selectable rows'\n      }\n    }\n  }\n}",...Default.parameters?.docs?.source}}},CustomizedColumns.parameters={...CustomizedColumns.parameters,docs:{...CustomizedColumns.parameters?.docs,source:{originalSource:"{\n  args: {\n    columns: [{\n      key: 'id',\n      name: 'ID',\n      width: 300,\n      minWidth: 200,\n      maxWidth: 400,\n      editable: true,\n      frozen: false,\n      resizable: true,\n      sortable: true\n    }, {\n      key: 'title',\n      name: 'Title',\n      width: 300,\n      minWidth: 200,\n      maxWidth: 400,\n      editable: false,\n      frozen: false,\n      resizable: true,\n      sortable: true\n    }],\n    rows: [{\n      id: '0',\n      title: 'Lorem ipsum dolor sit amet'\n    }, {\n      id: '1',\n      title: 'Consectetur adipiscing elit'\n    }, {\n      id: '2',\n      title: 'Pellentesque suscipit tortor est'\n    }, {\n      id: '3',\n      title: 'Ut egestas massa aliquam a'\n    }, {\n      id: '4',\n      title: 'Nulla egestas vestibulum felis a venenatis'\n    }, {\n      id: '5',\n      title: 'Sed aliquet pulvinar neque'\n    }]\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: \"This story showcases all possible props that can be set on 'columns'.\\n\" + \"Note that the 'editable' prop is meaningless when the 'editor' prop is not set.\\n\" + \"When an 'editor' is provided, the 'editable' prop will default to 'true'\"\n      }\n    }\n  }\n}",...CustomizedColumns.parameters?.docs?.source}}},CustomizedColumnDefaults.parameters={...CustomizedColumnDefaults.parameters,docs:{...CustomizedColumnDefaults.parameters?.docs,source:{originalSource:"{\n  args: {\n    columns: [{\n      key: 'id',\n      name: 'ID'\n    }, {\n      key: 'title',\n      name: 'Title'\n    }],\n    rows: [{\n      id: '0',\n      title: 'Lorem ipsum dolor sit amet'\n    }, {\n      id: '1',\n      title: 'Consectetur adipiscing elit'\n    }, {\n      id: '2',\n      title: 'Pellentesque suscipit tortor est'\n    }, {\n      id: '3',\n      title: 'Ut egestas massa aliquam a'\n    }, {\n      id: '4',\n      title: 'Nulla egestas vestibulum felis a venenatis'\n    }, {\n      id: '5',\n      title: 'Sed aliquet pulvinar neque'\n    }],\n    defaultColumnWidth: 300,\n    defaultColumnMinWidth: 100,\n    defaultColumnMaxWidth: 500,\n    defaultColumnSortable: false,\n    defaultColumnResizable: true\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: \"This story showcases all possible defaults for 'column' props that can be set.\\n\" + 'These defaults will be set to all columns and can be overridden by setting props' + ' on the individual columns'\n      }\n    }\n  }\n}",...CustomizedColumnDefaults.parameters?.docs?.source}}},ColumnCallBackFunctions.parameters={...ColumnCallBackFunctions.parameters,docs:{...ColumnCallBackFunctions.parameters?.docs,source:{originalSource:"{\n  args: {\n    columns: [{\n      key: 'id',\n      name: 'ID (sortable)',\n      sortable: true\n    }, {\n      key: 'title',\n      name: 'Title (sortable & editable)',\n      sortable: true\n    }],\n    rows: [{\n      id: '0',\n      title: 'Lorem ipsum dolor sit amet'\n    }, {\n      id: '1',\n      title: 'Consectetur adipiscing elit'\n    }, {\n      id: '2',\n      title: 'Pellentesque suscipit tortor est'\n    }, {\n      id: '3',\n      title: 'Ut egestas massa aliquam a'\n    }, {\n      id: '4',\n      title: 'Nulla egestas vestibulum felis a venenatis'\n    }, {\n      id: '5',\n      title: 'Sed aliquet pulvinar neque'\n    }],\n    onColumnResize: () => {\n      // eslint-disable-next-line no-console\n      console.log('Column resized');\n    }\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: \"This story showcases the 'onColumnResize' callback function.\\n\" + 'Check the developer console for output.'\n      }\n    }\n  }\n}",...ColumnCallBackFunctions.parameters?.docs?.source}}},CustomizedRows.parameters={...CustomizedRows.parameters,docs:{...CustomizedRows.parameters?.docs,source:{originalSource:"{\n  args: {\n    columns: [{\n      key: 'id',\n      name: 'ID'\n    }, {\n      key: 'title',\n      name: 'Title (editable)',\n      editable: true\n    }],\n    rows: [{\n      id: '0',\n      title: 'Lorem ipsum dolor sit amet'\n    }, {\n      id: '1',\n      title: 'Consectetur adipiscing elit'\n    }, {\n      id: '2',\n      title: 'Pellentesque suscipit tortor est'\n    }, {\n      id: '3',\n      title: 'Ut egestas massa aliquam a'\n    }, {\n      id: '4',\n      title: 'Nulla egestas vestibulum felis a venenatis'\n    }, {\n      id: '5',\n      title: 'Sed aliquet pulvinar neque'\n    }],\n    enableSelectColumn: true,\n    rowHeight: 50,\n    headerRowHeight: 100\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'This story showcases how rows can be customized.'\n      }\n    }\n  }\n}",...CustomizedRows.parameters?.docs?.source}}},CellCallbackFunctions.parameters={...CellCallbackFunctions.parameters,docs:{...CellCallbackFunctions.parameters?.docs,source:{originalSource:"{\n  args: {\n    columns: [{\n      key: 'id',\n      name: 'ID'\n    }, {\n      key: 'title',\n      name: 'Title (editable)',\n      editable: true\n    }],\n    rows: [{\n      id: '0',\n      title: 'Lorem ipsum dolor sit amet'\n    }, {\n      id: '1',\n      title: 'Consectetur adipiscing elit'\n    }, {\n      id: '2',\n      title: 'Pellentesque suscipit tortor est'\n    }, {\n      id: '3',\n      title: 'Ut egestas massa aliquam a'\n    }, {\n      id: '4',\n      title: 'Nulla egestas vestibulum felis a venenatis'\n    }, {\n      id: '5',\n      title: 'Sed aliquet pulvinar neque'\n    }],\n    onCellClick: (args: TableCellClickArgs<Row>, event: TableCellMouseEvent) => {\n      // eslint-disable-next-line no-console\n      console.log(args);\n\n      // eslint-disable-next-line no-console\n      console.log(event);\n    },\n    onCellDoubleClick: (args: TableCellClickArgs<Row>, event: TableCellMouseEvent) => {\n      // eslint-disable-next-line no-console\n      console.log(args);\n\n      // eslint-disable-next-line no-console\n      console.log(event);\n    },\n    onCellContextMenu: (args: TableCellClickArgs<Row>, event: TableCellMouseEvent) => {\n      // eslint-disable-next-line no-console\n      console.log(args);\n\n      // eslint-disable-next-line no-console\n      console.log(event);\n    },\n    onCellKeyDown: (args: TableCellKeyDownArgs<Row>, event: TableCellKeyboardEvent) => {\n      // eslint-disable-next-line no-console\n      console.log(args);\n\n      // eslint-disable-next-line no-console\n      console.log(event);\n    }\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'This story showcases all callback functions related to cells.\\n' + 'It implements the following callback functions:\\n' + '- onCellClick \\n- onCellDoubleClick \\n- onCellContextMenu \\n- onCellKeyDown \\n\\n' + 'Check the developer console for output'\n      }\n    }\n  }\n}",...CellCallbackFunctions.parameters?.docs?.source}}},Direction.parameters={...Direction.parameters,docs:{...Direction.parameters?.docs,source:{originalSource:"{\n  args: {\n    columns: [{\n      key: 'id',\n      name: 'ID'\n    }, {\n      key: 'title',\n      name: 'Title (editable)',\n      editable: true\n    }],\n    rows: [{\n      id: '0',\n      title: 'Lorem ipsum dolor sit amet'\n    }, {\n      id: '1',\n      title: 'Consectetur adipiscing elit'\n    }, {\n      id: '2',\n      title: 'Pellentesque suscipit tortor est'\n    }, {\n      id: '3',\n      title: 'Ut egestas massa aliquam a'\n    }, {\n      id: '4',\n      title: 'Nulla egestas vestibulum felis a venenatis'\n    }, {\n      id: '5',\n      title: 'Sed aliquet pulvinar neque'\n    }],\n    direction: 'rtl'\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: \"This story showcases the 'direction' prop. It can be set to either 'ltr' for left\" + \" to right behavior or 'rtl' for right to left behavior.\"\n      }\n    }\n  }\n}",...Direction.parameters?.docs?.source}}},Virtualization.parameters={...Virtualization.parameters,docs:{...Virtualization.parameters?.docs,source:{originalSource:"{\n  args: {\n    columns: [{\n      key: 'id',\n      name: 'ID'\n    }, {\n      key: 'title',\n      name: 'Title (editable)',\n      editable: true\n    }],\n    rows: generateRows(),\n    enableVirtualization: true\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'This story showcases virtualization in large tables'\n      }\n    }\n  }\n}",...Virtualization.parameters?.docs?.source}}},MiscellaneousFunctions.parameters={...MiscellaneousFunctions.parameters,docs:{...MiscellaneousFunctions.parameters?.docs,source:{originalSource:"{\n  args: {\n    columns: [{\n      key: 'id',\n      name: 'ID'\n    }, {\n      key: 'title',\n      name: 'Title (editable)',\n      editable: true\n    }],\n    rows: [{\n      id: '0',\n      title: 'Lorem ipsum dolor sit amet'\n    }, {\n      id: '1',\n      title: 'Consectetur adipiscing elit'\n    }, {\n      id: '2',\n      title: 'Pellentesque suscipit tortor est'\n    }, {\n      id: '3',\n      title: 'Ut egestas massa aliquam a'\n    }, {\n      id: '4',\n      title: 'Nulla egestas vestibulum felis a venenatis'\n    }, {\n      id: '5',\n      title: 'Sed aliquet pulvinar neque'\n    }, {\n      id: '6',\n      title: 'Lorem ipsum dolor sit amet'\n    }, {\n      id: '7',\n      title: 'Consectetur adipiscing elit'\n    }, {\n      id: '8',\n      title: 'Pellentesque suscipit tortor est'\n    }, {\n      id: '9',\n      title: 'Ut egestas massa aliquam a'\n    }, {\n      id: '10',\n      title: 'Nulla egestas vestibulum felis a venenatis'\n    }, {\n      id: '11',\n      title: 'Sed aliquet pulvinar neque'\n    }, {\n      id: '12',\n      title: 'Lorem ipsum dolor sit amet'\n    }, {\n      id: '13',\n      title: 'Consectetur adipiscing elit'\n    }, {\n      id: '14',\n      title: 'Pellentesque suscipit tortor est'\n    }, {\n      id: '15',\n      title: 'Ut egestas massa aliquam a'\n    }, {\n      id: '16',\n      title: 'Nulla egestas vestibulum felis a venenatis'\n    }, {\n      id: '17',\n      title: 'Sed aliquet pulvinar neque'\n    }],\n    onScroll: (event: UIEvent<HTMLDivElement>) => {\n      // eslint-disable-next-line no-console\n      console.log(event);\n    },\n    onCopy: ({\n      sourceRow,\n      sourceColumnKey\n    }: TableCopyEvent<Row>) => {\n      if (window.isSecureContext) {\n        navigator.clipboard.writeText(sourceRow[(sourceColumnKey as keyof Row)]);\n      }\n    },\n    onPaste: ({\n      sourceColumnKey,\n      sourceRow,\n      targetColumnKey,\n      targetRow\n    }: TablePasteEvent<Row>) => {\n      const incompatibleColumns = ['email', 'zipCode', 'date'];\n      if (sourceColumnKey === 'avatar' || ['id', 'avatar'].includes(targetColumnKey) || (incompatibleColumns.includes(targetColumnKey) || incompatibleColumns.includes(sourceColumnKey)) && sourceColumnKey !== targetColumnKey) {\n        return targetRow;\n      }\n      return {\n        ...targetRow,\n        [targetColumnKey]: sourceRow[(sourceColumnKey as keyof Row)]\n      };\n    }\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'This story showcases miscellaneous callback functions.\\n' + 'It implements the following callback functions:\\n' + '- onScroll \\n- onCopy \\n- onPaste \\n\\n' + 'Check the developer console for output'\n      }\n    }\n  }\n}",...MiscellaneousFunctions.parameters?.docs?.source}}},CustomClassNames.parameters={...CustomClassNames.parameters,docs:{...CustomClassNames.parameters?.docs,source:{originalSource:"{\n  args: {\n    columns: [{\n      key: 'id',\n      name: 'ID'\n    }, {\n      key: 'title',\n      name: 'Title (editable)',\n      editable: true\n    }],\n    rows: [{\n      id: '0',\n      title: 'Lorem ipsum dolor sit amet'\n    }, {\n      id: '1',\n      title: 'Consectetur adipiscing elit'\n    }, {\n      id: '2',\n      title: 'Pellentesque suscipit tortor est'\n    }, {\n      id: '3',\n      title: 'Ut egestas massa aliquam a'\n    }, {\n      id: '4',\n      title: 'Nulla egestas vestibulum felis a venenatis'\n    }, {\n      id: '5',\n      title: 'Sed aliquet pulvinar neque'\n    }],\n    className: 'paratext'\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'This story showcases how custom CSS classes can be used'\n      }\n    }\n  }\n}",...CustomClassNames.parameters?.docs?.source}}},CustomRenderEditCell.parameters={...CustomRenderEditCell.parameters,docs:{...CustomRenderEditCell.parameters?.docs,source:{originalSource:"{\n  args: {\n    columns: [{\n      key: 'id',\n      name: 'ID'\n    }, {\n      key: 'title',\n      name: 'Title (The title for id == 0 is editable)',\n      renderEditCell: CustomTextEditor<Row>,\n      editable: (row: Row) => {\n        return +row.id === 0;\n      }\n    }],\n    rows: [{\n      id: '0',\n      title: 'Lorem ipsum dolor sit amet'\n    }, {\n      id: '1',\n      title: 'Consectetur adipiscing elit'\n    }, {\n      id: '2',\n      title: 'Pellentesque suscipit tortor est'\n    }, {\n      id: '3',\n      title: 'Ut egestas massa aliquam a'\n    }, {\n      id: '4',\n      title: 'Nulla egestas vestibulum felis a venenatis'\n    }, {\n      id: '5',\n      title: 'Sed aliquet pulvinar neque'\n    }]\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'This story showcases how a custom cell editor can be set'\n      }\n    }\n  }\n}",...CustomRenderEditCell.parameters?.docs?.source}}}}}]);
//# sourceMappingURL=stories-table-stories.1beefc88.iframe.bundle.js.map